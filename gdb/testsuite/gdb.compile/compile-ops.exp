# Copyright 2014-2025 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Some coverage testing of DWARF operators for the compiler
# integration.

load_lib compile-support.exp
load_lib dwarf.exp

# This test can only be run on targets which support DWARF-2 and use gas.
require dwarf2_support

require allow_compile_tests

require is_c_compiler_gcc

standard_testfile .c -dbg.S

#
# A port of the pr10770.c test code to the DWARF assembler format.
#

set assert_tos_non0 {
    DW_OP_bra 3
    DW_OP_skip -3
}

set assert_tos_0 [subst {
    DW_OP_lit0
    DW_OP_eq
    $assert_tos_non0
}]

set program [subst {
    DW_OP_lit0
    DW_OP_nop
    $assert_tos_0
    DW_OP_lit1
    DW_OP_const1u 1
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit16
    DW_OP_const2u 16
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit31
    DW_OP_const4u 31
    DW_OP_ne
    $assert_tos_0
    DW_OP_lit1
    DW_OP_neg
    DW_OP_const1s -1
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit16
    DW_OP_neg
    DW_OP_const2s -16
    DW_OP_ne
    $assert_tos_0
    DW_OP_lit31
    DW_OP_const4s -31
    DW_OP_neg
    DW_OP_ne
    $assert_tos_0
    DW_OP_lit7
    DW_OP_dup
    DW_OP_plus_uconst 2
    DW_OP_lit9
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit7
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit20
    DW_OP_lit1
    DW_OP_drop
    DW_OP_lit20
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit17
    DW_OP_lit19
    DW_OP_over
    DW_OP_lit17
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit19
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit17
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit1
    DW_OP_lit2
    DW_OP_lit3
    DW_OP_lit4
    DW_OP_pick 2
    DW_OP_lit2
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit4
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit3
    DW_OP_eq
    $assert_tos_non0
    DW_OP_pick 0
    DW_OP_lit2
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit2
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit1
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit6
    DW_OP_lit12
    DW_OP_swap
    DW_OP_lit6
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit12
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit7
    DW_OP_lit8
    DW_OP_lit9
    DW_OP_rot
    DW_OP_lit8
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit7
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit9
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit7
    DW_OP_abs
    DW_OP_lit7
    DW_OP_eq
    $assert_tos_non0
    DW_OP_const1s -123
    DW_OP_abs
    DW_OP_const1u 123
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit3
    DW_OP_lit6
    DW_OP_and
    DW_OP_lit2
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit3
    DW_OP_lit6
    DW_OP_or
    DW_OP_lit7
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit17
    DW_OP_lit2
    DW_OP_minus
    DW_OP_lit15
    DW_OP_eq
    $assert_tos_non0
    # Divide is signed truncating toward zero.
    DW_OP_const1s -6
    DW_OP_const1s -2
    DW_OP_div
    DW_OP_lit3
    DW_OP_eq
    $assert_tos_non0
    DW_OP_const1s -7
    DW_OP_const1s 3
    DW_OP_div
    DW_OP_const1s -2
    DW_OP_eq
    $assert_tos_non0
    # Modulo is unsigned.
    DW_OP_const1s -6
    DW_OP_const1s -4
    DW_OP_mod
    DW_OP_const1s -6
    DW_OP_eq
    $assert_tos_non0
    DW_OP_const1s -6
    DW_OP_lit4
    DW_OP_mod
    DW_OP_lit2
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit6
    DW_OP_const1s -4
    DW_OP_mod
    DW_OP_lit6
    DW_OP_eq
    $assert_tos_non0
    # Signed modulo can be implemented using 'over over div mul minus'.
    DW_OP_const1s -6
    DW_OP_const1s -4
    DW_OP_over
    DW_OP_over
    DW_OP_div
    DW_OP_mul
    DW_OP_minus
    DW_OP_const1s -2
    DW_OP_eq
    $assert_tos_non0
    DW_OP_const1s -7
    DW_OP_lit3
    DW_OP_over
    DW_OP_over
    DW_OP_div
    DW_OP_mul
    DW_OP_minus
    DW_OP_const1s -1
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit7
    DW_OP_const1s -3
    DW_OP_over
    DW_OP_over
    DW_OP_div
    DW_OP_mul
    DW_OP_minus
    DW_OP_lit1
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit16
    DW_OP_lit31
    DW_OP_plus_uconst 1
    DW_OP_mul
    DW_OP_const2u 512
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit5
    DW_OP_not
    DW_OP_lit31
    DW_OP_and
    DW_OP_lit26
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit12
    DW_OP_lit31
    DW_OP_plus
    DW_OP_const1u 43
    DW_OP_eq
    $assert_tos_non0
    DW_OP_const1s -6
    DW_OP_lit2
    DW_OP_plus
    DW_OP_const1s -4
    DW_OP_eq
    $assert_tos_non0
    DW_OP_const1s -6
    DW_OP_plus_uconst 3
    DW_OP_const1s -3
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit16
    DW_OP_lit4
    DW_OP_shl
    DW_OP_const2u 256
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit16
    DW_OP_lit3
    DW_OP_shr
    DW_OP_lit2
    DW_OP_eq
    $assert_tos_non0
    DW_OP_const1s -16
    DW_OP_lit3
    DW_OP_shra
    DW_OP_const1s -2
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit3
    DW_OP_lit6
    DW_OP_xor
    DW_OP_lit5
    DW_OP_eq
    $assert_tos_non0
    DW_OP_lit3
    DW_OP_lit6
    DW_OP_le
    $assert_tos_non0
    DW_OP_lit3
    DW_OP_lit3
    DW_OP_le
    $assert_tos_non0
    DW_OP_lit6
    DW_OP_lit3
    DW_OP_le
    $assert_tos_0
    DW_OP_lit3
    DW_OP_lit6
    DW_OP_lt
    $assert_tos_non0
    DW_OP_lit3
    DW_OP_lit3
    DW_OP_lt
    $assert_tos_0
    DW_OP_lit6
    DW_OP_lit3
    DW_OP_lt
    $assert_tos_0
    DW_OP_lit3
    DW_OP_lit6
    DW_OP_ge
    $assert_tos_0
    DW_OP_lit3
    DW_OP_lit3
    DW_OP_ge
    $assert_tos_non0
    DW_OP_lit6
    DW_OP_lit3
    DW_OP_ge
    $assert_tos_non0
    DW_OP_lit3
    DW_OP_lit6
    DW_OP_gt
    $assert_tos_0
    DW_OP_lit3
    DW_OP_lit3
    DW_OP_gt
    $assert_tos_0
    DW_OP_lit6
    DW_OP_lit3
    DW_OP_gt
    $assert_tos_non0
    DW_OP_const1s -6
    DW_OP_lit1
    DW_OP_shr
    DW_OP_lit0
    DW_OP_gt
    $assert_tos_non0
    DW_OP_const1s -6
    DW_OP_lit1
    DW_OP_shra
    DW_OP_lit0
    DW_OP_lt
    $assert_tos_non0
    # Finally some result.
    DW_OP_addr ptr
}]

if { [prepare_for_testing "failed to prepare" ${testfile} ${srcfile}] } {
    return -1
}

# Make some DWARF for the test.
set asm_file [standard_output_file $srcfile2]
Dwarf::assemble $asm_file {

    # Find start, end, and length of "func".
    get_func_info func

    # Creating a CU with 4-byte addresses lets this test link on both
    # 32- and 64-bit machines.
    cu { addr_size 4 } {

	declare_labels int_label

	compile_unit {
	    DW_AT_name file1.txt
	    DW_AT_language @DW_LANG_C
	    DW_AT_low_pc $func_start addr
	    DW_AT_high_pc $func_end addr
	} {
	    global program

	    int_label: base_type {
		DW_AT_name int
		DW_AT_byte_size 4 sdata
		DW_AT_encoding @DW_ATE_signed
	    }

	    subprogram {
		DW_AT_external 1 flag
		DW_AT_name func
		DW_AT_low_pc $func_start addr
		DW_AT_high_pc $func_end addr
	    } {
		formal_parameter {
		    DW_AT_name param
		    DW_AT_variable_parameter 1 flag
		    DW_AT_type :$int_label
		    DW_AT_location $program SPECIAL_expr
		}

		formal_parameter {
		    DW_AT_name optimized_out
		    DW_AT_variable_parameter 1 flag
		    DW_AT_type :$int_label
		}
	    }
	}
    }
}

if { [prepare_for_testing "failed to prepare" ${testfile} \
	  [list $srcfile $asm_file] {nodebug}] } {
    return -1
}

if {![runto func]} {
    return -1
}

if {[skip_compile_feature_untested]} {
    return -1
}

# If we have a bug, this will hang.
gdb_test_no_output "compile code (void) param"

# We can't access optimized-out variables, but their presence should
# not affect compilations that don't refer to them.
gdb_test "compile code optimized_out" \
    ".*optimized out.*Compilation failed."
